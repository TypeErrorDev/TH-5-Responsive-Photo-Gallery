Design
    Meets Expectations:
        ✔ Design implementation includes the thumbnail gallery and a search box. @done(22-03-12 23:14)
        ✔ General spacing and arrangement of the elements matches the layout of the gallery mockup. @done(22-03-12 23:14)
        ✔ CSS Grid Layout is used to create the thumbnail gallery layout. @done(22-03-12 23:14)
        ✔ Thumbnail gallery should have 4 columns when screen width is at 1024px. @done(22-03-12 23:15)
    
    Exceeds Expectations:
        ✔ Make the CSS Grid thumbnail gallery responsive without utilizing media queries @done(22-03-14 01:32)

Lightbox Functionality
    Meets Expectations:
        ✔ Successfully implements the baguetteBox.js lightbox plugin and ALL of the following features are functioning: @done(22-03-12 23:15)
            ✔ Larger images appear when gallery thumbnail image is clicked. @done(22-03-12 23:15)
            ✔ Background overlay hides the gallery and covers the entire window when displaying larger images. @done(22-03-12 23:15)
            ✔ Images in lightbox include captions. @done(22-03-12 23:15)
            ✔ Lightbox images can be navigated by clicking right and left arrows. @done(22-03-12 23:15)
            ✔ The lightbox can be closed. @done(22-03-12 23:15)
        
Content Filtering
    Meets Expectations:
        ✔ Successfully implements the included searchFilter.js plugin for the search box functionality and ALL of the following features are functioning: @done(22-03-12 23:34)
            ✔ As the user types into the search box, only photos that match the caption text appear. @done(22-03-12 23:34)
            ✔ Case insensitivity has been added so searches will ignore letter case. @done(22-03-12 23:34)
    
    Exceeds Expectations
        ☐ Project uses original JavaScript code to implement search box functionality instead of a plugin. ALL of the following features are functioning: As the user types into the search box, only photos that match the caption text appear. Case insensitivity has been added so searches will ignore letter case.

        


grab the input value

select all anchor elements
loop over each anchor element
  grab the data-caption attribute text off of the anchor element
  check if the caption contains the input value
    set the display to block
  else
    set the display to none








// const search = document.getElementById("search");

// // Declare Variables
// const search = new Filter("search", "data-caption");

// // Set Arrays for photo Title
// var captions = [
//   "Hay Bales",
//   "Lake",
//   "Canyon",
//   "Iceberg",
//   "Desert",
//   "Fall",
//   "Plantation",
//   "Dunes",
//   "Countryside Lane",
//   "Sunset",
//   "Cave",
//   "Bluebells",
// ];

// search = document.getElementById("search");

// var render_lists = (lists) => {
//     var searchBar = "";
//     for (index in lists) {
//         search += "<a>" + lists[index] + "</a>";
//     }
//     search.innerHTML = searchBar;
// };

// render_lists(captions);

// search = document.getElementById("search");

// var filterUsers = (e) => {
//     keyword = input.value.toLowerCase();
//     filtered_photos = users.filter(function (user) {
//         user = user.toLowerCase();
//         return user.indexOf(keyword) > -1;
//     });

//     render_lists(filtered_users);
// };

// searchBar.addEventListener("keyup", filterUsers);
